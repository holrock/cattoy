user nginx;
worker_processes auto;
worker_rlimit_nofile 100000;

error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;
    
# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;
        
events {
  worker_connections 2048;
  multi_accept on;
  use epoll;
}   


http {  
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  access_log  /var/log/nginx/access.log  main;

  sendfile            on;
  tcp_nodelay         on;
  keepalive_timeout   5;
  types_hash_max_size 2048;
  server_tokens off;
  tcp_nopush on;
  client_header_timeout 10;
  client_body_timeout 10;
  reset_timedout_connection on;
  send_timeout 10;
  limit_conn_zone $binary_remote_addr zone=addr:5m;
  limit_conn addr 100;
  #default_type text/html;
  charset UTF-8;
  gzip on;
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_min_length 1024;
  gzip_comp_level 6;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;
  open_file_cache max=100000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;
  proxy_cache_path /var/cache/nginx/proxy_cache
                   levels=1:2
                   keys_zone=TLSIMG:2m 
                   max_size=1g
                   inactive=1d;

  include             /etc/nginx/mime.types;
  default_type        application/octet-stream;

  upstream myapp {
      server unix:///var/tmp/puma.sock;
  }

  upstream omac {
      server 127.0.0.1:8999;
  }

  #server {
    #server_name  mail.cattoy.info;
    #root /var/www/mail;
    #include letsencrypt.conf;
  #}

  server {
    server_name _;
    listen 8889;
    root /var/www/tlsimg;
    access_log  /var/log/nginx/image_proxy.access.log  main;

    location / {
      if ($arg_w = '') {
        rewrite ^/(.*)$ /original/$1 last;
      }
      set $width 240;
      set $height 240;
      set $quality 75;
 
      if ($arg_w ~ (\d*)) {
        set $width $1;
      }
      if ($arg_h ~ (\d*)) {
        set $height $1;
      }
      if ($arg_q ~ (100|[1-9][0-9]|[1-9])) {
        set $quality $1;
      }
      rewrite ^/(.*)$ /resize/$1 last;
    }

    location /resize/ {
      rewrite ^/resize/([^/]+) /$1?url=$arg_url break;
      proxy_pass http://omac/;
      internal;
      image_filter                resize $width $height;
      image_filter_jpeg_quality   $quality;
      image_filter_buffer         20M;
      image_filter_interlace      on;
      error_page 415 = @empty;
    }

    location /original/ {
      internal;
      proxy_pass http://omac/;
    }

    location @empty {
      empty_gif;
    }
  }

  server {
    server_name tlsimg.cattoy.info;
    root /var/www/tlsimg;

    location / {
      proxy_pass http://localhost:8889;
      proxy_cache TLSIMG;
      proxy_cache_key "$host$document_uri$is_args&$arg_w&$arg_h&$arg_q"; # document_uri includes unique hmac key
      proxy_cache_lock on;
      proxy_cache_valid 30d;  # Cache valid thumbnails for 30 days.
      proxy_cache_valid any 15s;  # Everything else gets 15s.
      proxy_cache_use_stale error timeout invalid_header updating;
      proxy_http_version 1.1;
      expires 30d;
    }

    access_log  /var/log/nginx/tlsimg.access.log  main;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem ;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/tlsimg.cattoy.info/fullchain.pem;
    #add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains;';
    ssl on;
  
    include letsencrypt.conf;
    listen 443 ssl http2; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/tlsimg.cattoy.info/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/tlsimg.cattoy.info/privkey.pem; # managed by Certbot
    ssl_session_cache shared:le_nginx_SSL:5m; # managed by Certbot
    ssl_session_timeout 1440m; # managed by Certbot
  
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # managed by Certbot
    ssl_prefer_server_ciphers on; # managed by Certbot

    ssl_ciphers 'kEECDH+ECDSA+AES128 kEECDH+ECDSA+AES256 kEECDH+AES128 kEECDH+AES256 kEDH+AES128 kEDH+AES256 DES-CBC3-SHA +SHA !aNULL !eNULL !LOW !kECDH !DSS !MD5 !EXP !PSK !SRP !CAMELLIA !SEED';

  }

  server {
    listen       80 default_server;
    #listen       [::]:80 default_server;
    server_name  www.cattoy.info;
    rewrite ^ https://$server_name$request_uri? permanent;
  }

  server {
    server_name  www.cattoy.info;
    root         /var/www/cattoy/current/public;

    if (-f $document_root/maintenance.html) {
      rewrite  ^(.*)$  /maintenance.html last;
      break;
    }

    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-Proto $scheme;

      # If the file exists as a static file serve it directly without
      # running all the other rewrite tests on it
      if (-f $request_filename) {
        break;
      }

      # check for index.html for directory index
      # if it's there on the filesystem then rewrite
      # the url to add /index.html to the end of it
      # and then break to send it to the next config rules.
      if (-f $request_filename/index.html) {
        rewrite (.*) $1/index.html break;
      }

      # this is the meat of the rack page caching config
      # it adds .html to the end of the url and then checks
      # the filesystem for that file. If it exists, then we
      # rewrite the url to have explicit .html on the end
      # and then send it on its way to the next config rule.
      # if there is no file on the fs then it sets all the
      # necessary headers and proxies to our upstream pumas
      if (-f $request_filename.html) {
        rewrite (.*) $1.html break;
      }

      if (!-f $request_filename) {
        proxy_pass http://myapp;
        break;
      }
    }

    # Now this supposedly should work as it gets the filenames with querystrings that Rails provides.
    # BUT there's a chance it could break the ajax calls.
    location ~* \.(ico|css|gif|jpe?g|png|js)(\?[0-9]+)?$ {
      expires max;
      break;
    }

    # Error pages
    # error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /var/www/cattoy/current/public;
    }

    ssl_dhparam /etc/nginx/ssl/dhparam.pem ;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/www.cattoy.info/fullchain.pem;
    #resolver 8.8.8.8;
    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains;';
    ssl on;

    include letsencrypt.conf;
    listen 443 ssl http2; # managed by Certbot
ssl_certificate /etc/letsencrypt/live/www.cattoy.info/fullchain.pem; # managed by Certbot
ssl_certificate_key /etc/letsencrypt/live/www.cattoy.info/privkey.pem; # managed by Certbot
ssl_session_cache shared:le_nginx_SSL:5m; # managed by Certbot
ssl_session_timeout 1440m; # managed by Certbot

ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # managed by Certbot
ssl_prefer_server_ciphers on; # managed by Certbot

 ssl_ciphers 'kEECDH+ECDSA+AES128 kEECDH+ECDSA+AES256 kEECDH+AES128 kEECDH+AES256 kEDH+AES128 kEDH+AES256 DES-CBC3-SHA +SHA !aNULL !eNULL !LOW !kECDH !DSS !MD5 !EXP !PSK !SRP !CAMELLIA !SEED';
 #ssl_ciphers "ECDHE+RSAGCM:ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:!EXPORT:!DES:!3DES:!MD5:!DSS";
#ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-SHA ECDHE-ECDSA-AES256-SHA ECDHE-ECDSA-AES128-SHA256 ECDHE-ECDSA-AES256-SHA384 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-RSA-AES256-GCM-SHA384 ECDHE-RSA-AES128-SHA ECDHE-RSA-AES128-SHA256 ECDHE-RSA-AES256-SHA384 DHE-RSA-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-SHA DHE-RSA-AES256-SHA DHE-RSA-AES128-SHA256 DHE-RSA-AES256-SHA256 EDH-RSA-DES-CBC3-SHA"; # managed by Certbot


}
}
